name: Blockchain Client CI/CD

on:
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: username/zkevm-client
  KUBERNETES_NAMESPACE: blockchain-nodes
  TEST_NETWORK_NAME: test-network

jobs:
  validate-env:
    runs-on: ubuntu-latest
    steps:
      - name: Check required secrets
        run: |
          [[ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]] || { echo "DOCKERHUB_USERNAME is required"; exit 1; }
          [[ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]] || { echo "DOCKERHUB_TOKEN is required"; exit 1; }
          [[ -n "${{ secrets.KUBE_CONFIG }}" ]] || { echo "KUBE_CONFIG is required"; exit 1; }

  build-and-push:
    needs: validate-env
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Generate version tag
        run: |
          echo "VERSION_TAG=$(date +%Y%m%d)-${GITHUB_SHA::8}" >> $GITHUB_ENV
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Container Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
          
<<<<<<< HEAD
      - name: Build and push client image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            ${{ env.DOCKER_IMAGE }}:${{ env.VERSION_TAG }}
            ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy-service:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
          
      - name: Validate Kubernetes manifests
        run: |
          kubectl apply --dry-run=client -f k8s/

      - name: Deploy test network
        run: |
          kubectl create namespace $TEST_NETWORK_NAME --dry-run=client -o yaml | kubectl apply -f -
          kubectl label namespace $TEST_NETWORK_NAME createdBy=pipeline --overwrite
          kubectl apply -f k8s/client-deployment.yaml
          kubectl apply -f k8s/client-service.yaml
          
      - name: Check deployment health
        run: |
          kubectl rollout status deployment/blockchain-client -n $TEST_NETWORK_NAME
          kubectl wait --for=condition=ready pod -l app=blockchain-client -n $TEST_NETWORK_NAME --timeout=300s
=======
    - name: Deploy with Docker Compose
      run: |
        echo "
        version: '3.8'
        services:
          smart-contract:
            image: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
            ports:
              - '8545:8545'
            environment:
              - NODE_ENV=production
          ganache:
            image: trufflesuite/ganache:latest
            ports:
              - '8546:8545'
        " > docker-compose.yml
>>>>>>> 1825f8691809ccd905561fb1745b276d999b51c7
        
      - name: Store deployment info
        run: |
          echo "DEPLOYMENT_ID=${GITHUB_SHA}" >> $GITHUB_ENV

  contract-deployment:
      needs: deploy-service
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3

        - name: Setup Node.js
          uses: actions/setup-node@v3
          with:
            node-version: '16'
            
        - name: Install dependencies
          run: npm install
        
        - name: Get service endpoint
          run: |
            export SERVICE_IP=$(kubectl get svc blockchain-client \
              -n $TEST_NETWORK_NAME -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            echo "SERVICE_ENDPOINT=http://$SERVICE_IP:8545" >> $GITHUB_ENV

        - name: Deploy test contracts
          run: |
            npx hardhat run scripts/deploy-test-contracts.js \
              --network testnet \
              --rpc-url ${{ env.SERVICE_ENDPOINT }}

  run-tests:
    needs: contract-deployment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: [basic-operations, state-handling, events]
        include:
          - test-suite: basic-operations
            test-path: test/contracts/basic-operations.test.js
          - test-suite: state-handling
            test-path: test/contracts/state-handling.test.js
          - test-suite: events
            test-path: test/contracts/events.test.js
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: npm install

      - name: Get service endpoint
        run: |
          export SERVICE_IP=$(kubectl get svc blockchain-client \
            -n $TEST_NETWORK_NAME -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "SERVICE_ENDPOINT=http://$SERVICE_IP:8545" >> $GITHUB_ENV
          
      - name: Run ${{ matrix.test-suite }} tests
        run: |
          npx hardhat test ${{ matrix.test-path }} \
            --network testnet \
            --rpc-url ${{ env.SERVICE_ENDPOINT }}

  cleanup:
    needs: [contract-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config

      - name: Cleanup test environment
        if: ${{ !contains(github.ref, 'main') }}
        run: |
          kubectl delete namespace $TEST_NETWORK_NAME --ignore-not-found
          kubectl get namespaces -l createdBy=pipeline | \
          while read name _; do
            if [[ "$name" != "$TEST_NETWORK_NAME" ]]; then
              kubectl delete namespace $name
            fi
          done

      - name: Cleanup old images
        run: |
          docker image prune -a --force --filter "until=24h"

  notify:
    needs: [build-and-push, deploy-service, contract-tests, cleanup]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Notify on failure
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const run_id = context.runId;
            github.rest.issues.create({
              owner,
              repo,
              title: `Pipeline failure in ${process.env.GITHUB_WORKFLOW}`,
              body: `Pipeline failed in run ${run_id}. Check the [workflow run](https://github.com/${owner}/${repo}/actions/runs/${run_id}) for details.`
            });
